1. First Deploy your project to GitHub.
2. In AWS create a instance from EC2 dashboard.
	-Give a name for the instance.
	-For Amazon Machine Image search for Ubuntu.
	-For Instance Type use the free version.
	-Create a new key pair(.pem file very important)
	-Click on launch instance.
3. Edit the Inbound Rules from the Security Groups of instance just created:-
	-All TCP | Anywhere IPv4
	-HTTP    | Anywhere IPv4
	-SSH	 | Anywhere IPv4 
4. Now check for Public IPv4 address by clicking on the created instance. (This is the address where our application will be deployed)
5. Open Git Bash where the key pair has been stored.
6. run command:- ssh -i "key_pair_filename.pem" ubuntu@(Your IPV4 address)
7. run the following commands:- 
	-ls    #You will not get anything as there is no directory present
	-sudo apt update
 	-sudo apt install python3-venv python3-dev libpq-dev nginx curl
8. Create Virtual Environment for the project by following commands:- 
	-mkdir ~/myprojectdir
	-cd ~/myprojectdir
	-python3 -m venv myprojectenv
	-source myprojectenv/bin/activate
9. Clone the Project from the git repository and run the command pip install -r requirements.txt, make sure in settings.py of your project allowed hosts is set to all.
10. Run the following commands to install gunicorn :- 
	- sudo apt install gunicorn 
11. Now Creating systemd socket and services files for Gunicorn :-

This is the Project Structure please check the commands accordingly:- 

project/
│
├── myprojectenv/  # Virtual environment directory
│   ├── bin/
│   ├── include/
│   ├── lib/
│   ├── pip-selfcheck.json
│   ├── pyvenv.cfg
│   └── ...
│
└── Recipe-CRUD-operations/
    ├── manage.py
    ├── learn/
    │   ├── __init__.py
    │   ├── settings.py
    │   ├── urls.py
    │   ├── wsgi.py
    │   ├── asgi.py  # (optional, if you're using ASGI)
    │   └── __init__.py
    │
    ├── myapp/
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── apps.py
    │   ├── models.py
    │   ├── tests.py
    │   ├── urls.py
    │   └── views.py
    │
    └── db.sqlite3  # (or your database file, if using SQLite)



	For socket file:
	- sudo nano /etc/systemd/system/gunicorn.socket
	- Add the following lines inside the file opened after the above command:

 	 *****

[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target

	 *****
	ctrl+S, ctrl+x


	For service file:
	- sudo nano /etc/systemd/system/gunicorn.service
	- Add the following lines inside the file opened after the above command:

 	 *****
	 
[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=ubuntu              #Need to changed
Group=www-data
WorkingDirectory=/home/ubuntu/project/Recipe-CRUD-operations    #Need to be changed use yours using 'pwd' command
ExecStart=/home/ubuntu/project/myprojectenv/bin/gunicorn \      #Need to be changed
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          learn.wsgi:application				#Need to be changed

[Install]
WantedBy=multi-user.target
	 

	 *****

	ctrl+S, ctrl+x

12. After this run the following commands:-
	-sudo systemctl start gunicorn.socket
	-sudo systemctl enable gunicorn.socket 
13. Check for the Gunicorn socket File:-
	-sudo systemctl status gunicorn.socket 
14. check for the existence of the gunicorn.sock file within the /run directory:
	-file /run/gunicorn.sock 
15. After this run the command:-
	-sudo journalctl -u gunicorn.socket
16 Testing Socket Activation:
	-sudo systemctl status gunicorn
	-curl --unix-socket /run/gunicorn.sock localhost (After this command index.html code should be visible in the terminal)
17. After this:-
	-sudo systemctl status gunicorn
	-sudo systemctl daemon-reload
	-sudo systemctl restart gunicorn
18. Configure Nginx to Proxy Pass to Gunicorn:
	-sudo nano /etc/nginx/sites-available/myproject
	-Enter the follwing code when a file to edit open up:-
	
		****

server {
    listen 80;
    server_name 13.60.240.37;    #Need to be updated(The IPV4 address received in the above step)

    location = /favicon.ico { access_log off; log_not_found off; }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }
}

		****

19. Now run the following command:
	-sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled  #Remember to update myproject
	-sudo nginx -t
	-sudo systemctl restart nginx
	-sudo ufw delete allow 8000
	-sudo ufw allow 'Nginx Full' 
20. Try to run the IPV4 address. Boom! your apllication is Deployed

Refrences:
1. Digital Ocean:  https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu
2. Code Keen (Youtube) 


--------------------------For Connecting to AWS after Deployment-------------------------

1. ssh -i "<file name>.pem" ubuntu@13.234.112.104
2. Run Commands:- 
	-sudo systemctl daemon-reload
	-sudo systemctl restart gunicorn
	-sudo systemctl restart nginx